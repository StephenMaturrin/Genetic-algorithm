import random as rand
import numpy as np
from collections import OrderedDict
import pandas as pd
import os
from datetime import datetime
from ms255613_project.generic_functions import  get_logdir
class induvidual():


#TODO differentiation between equals model
#TODO may I use objects or dictionaries ?
#TODO the layers are also features

    def __init__(self,input_layer=12,output_layer=1):
        self.input_layer = input_layer
        self.output_layer = output_layer
        self.learning_rate= 0
        self.n_layers = []
        self.NN_ID=[]
        self.log_individual = {"Fitness": 0, "ID_father": None, "ID_mother": None, "ID_population": None, "NN_ID": None, "layout": None,
                          "Learning_rate": None}

    def create_individial(self):

        self.learning_rate = np.random.randint(1,10)**-np.random.randint(1,10)
        self.NN_ID.append(self.learning_rate)

        self.log_individual.update({"Learning_rate":self.learning_rate})
        layers = np.random.randint(1,4)
        self.n_layers.append(self.input_layer)
        self.NN_ID.append(self.n_layers[-1])

        for i in range(layers):
            self.n_layers.append(np.random.randint(1,64))
            self.NN_ID.append(self.n_layers[-1])
        self.n_layers.append(self.output_layer)
        self.NN_ID.append(self.n_layers[-1])

        self.log_individual.update({"NN_ID":self.NN_ID})
        self.log_individual.update({"layout": self.n_layers})


        return self.log_individual



    def get_gen(self):
        return self.log_individual

    def update_gen(self,parameter, value):
        self.log_individual.update({parameter:value})

    def get_gen(self,parameter):
        return self.log_individual[parameter]

population = []
aux_population= {}
#
def get_simple_fitness():
    return  np.random.random()

def create_individual(first ,input_layer=None,output_layer=None,NN_ID=None,n_layers=None,learning_rate=None):
    NN_ID = []
    if (first ):
        learning_rate = np.random.randint(1, 10) ** -np.random.randint(1,9)
        layers = np.random.randint(1, 4)
        n_layers=[]
        n_layers.append(input_layer)

        NN_ID.append(learning_rate)
        NN_ID.append(n_layers[-1])

        for i in range(layers):
            n_layers.append(np.random.randint(1, 64))
            NN_ID.append(n_layers[-1])
        n_layers.append(output_layer)
        NN_ID.append(n_layers[-1])
    else:


        NN_ID.append(learning_rate)
        for i in n_layers:
            NN_ID.append(i)

    # n_layers = np.array(n)
    individual = {"Fitness": [get_simple_fitness()],
            "NN_ID": [[str(i) for i in  NN_ID]],
            "layout": [[str(i) for i in n_layers ]],
            "Learning_rate": learning_rate}

    return individual




def create_population_simple(n_population,input_layer=13, output_layer=1):
    population =[]
    for i in range(n_population):
        population.append(pd.DataFrame(create_individual(first=True,input_layer=input_layer,output_layer=output_layer),index=[i]))

    return  population

def selection (population, n_best,n_worst):

    return population.head(n_best),population.tail(n_worst)


def ranking (population):
    df = population.sort_values(by='Fitness')
    return df


def overcrossing (group1,group2,crossover_likelihood):
    population=[]
    for index_g1 in range(len(group1)):

        induvidual_id_g1 = group1.NN_ID
        induvidual_id_g1 = induvidual_id_g1.iloc[index_g1]
        induvidual_id_g1 = np.array([float(i) for i in induvidual_id_g1])
        A1 = np.array([i for i in induvidual_id_g1[0:int(len(induvidual_id_g1) / 2)]])
        B1 = np.array([i for i in induvidual_id_g1[int(len(induvidual_id_g1) / 2):len(induvidual_id_g1)]])

        for index_g2 in range(len(group2)):
            induvidual_id_g2 = group2.NN_ID
            induvidual_id_g2 = induvidual_id_g2.iloc[index_g2]
            induvidual_id_g2 = np.array([float(i) for i in induvidual_id_g2])
            A2 = np.array([i for i in induvidual_id_g2[0:int(len(induvidual_id_g2) / 2)]])
            B2 = np.array([i for i in induvidual_id_g2[int(len(induvidual_id_g2) / 2):len(induvidual_id_g2)]])

            #  crossover likelihood(80 % -95 %)
            # We may want that parents survive in the next generation
            # In order to do that, we need to give them a likelihood  (a little chance)
            if(np.random.rand()<crossover_likelihood):
                new_indiv_1 = np.concatenate([A2, B1])
                new_indiv_2 = np.concatenate([A1, B2])
            else:
                new_indiv_1 = induvidual_id_g1
                new_indiv_2 = induvidual_id_g2



            population.append(
                pd.DataFrame(create_individual(
                    first=False,
                    learning_rate=new_indiv_2[0],
                    n_layers=new_indiv_2[1:])))
            population.append(
                pd.DataFrame(create_individual(
                    first=False,
                    learning_rate=new_indiv_1[0],



                    n_layers=new_indiv_1[1:])))

    population = pd.concat(population)
    # now = datetime.utcnow().strftime('%B-%d-%Y-%H:%M:%S')
    population.to_csv("original.csv", sep=';', header=True, float_format='%.8f', index=False)
    return population


def mutation (population,n_population,mutation_likelihood):
    population_mut =[]
    for index in range(n_population):

        print("IN\n", population.iloc[index])
        if (np.random.rand() < mutation_likelihood):
            print("MUTADO ")

            ly = np.array([float(i) for i in population.iloc[index].layout])
            population.iloc[index].Learning_rate = population.iloc[index].Learning_rate* np.random.rand()
            layer_selected = np.random.randint(1,len(ly)-1)
            ly[layer_selected]= ly[layer_selected]+ np.random.randint(-ly[layer_selected],ly[layer_selected])



        else:
            ly =population.iloc[index].layout
            lr = population.iloc[index].Learning_rate
        print("OUT\n", lr, ly)
        population_mut.append(
                pd.DataFrame(create_individual(
                    first=False,
                    learning_rate=lr,
                    n_layers=ly)))
    population_mut= pd.concat(population_mut)
    population_mut.to_csv("population_mut.csv", sep=';', header=True, float_format='%.8f', index=False)
    return  population_mut



    population = pd.concat(population)
    now = datetime.utcnow().strftime('%B-%d-%Y-%H:%M:%S')
    # population.to_csv(os.getcwd()+"/test/{}{}".format(now, ".csv"), sep=';', header=True, float_format='%.6f', index=False)
    return population









pop = create_population_simple(100)
pop = pd.concat(pop)


population_ranked = ranking(pop)
group1, group2 = selection(population_ranked,n_best=5,n_worst=5)
pop = overcrossing(group1,group2,0.9)
pop = mutation(pop,50,mutation_likelihood=0.05)

print(pop)




#
# #
# # #
# induvidual_id_g2 = group2.NN_ID
#
# induvidual_id_g2 = induvidual_id_g2.iloc[0]
# induvidual_id_g2 = np.array([float(i) for i in induvidual_id_g2])
# A2= np.array([i for i in induvidual_id_g2[0:int(len(induvidual_id_g2)/2)]])
# B2= np.array([i for i in induvidual_id_g2[int(len(induvidual_id_g2)/2):len(induvidual_id_g2)]])
#
# print(induvidual_id_g2)
# print(A2)
# print(B2)
#
# # print("------------->__________<--------------\n")
# #
# induvidual_id_g1 = group1.NN_ID
# induvidual_id_g1 = induvidual_id_g1.iloc[0]
# induvidual_id_g1 = np.array([float(i) for i in induvidual_id_g1])
# A1= np.array([i for i in induvidual_id_g1[0:int(len(induvidual_id_g1)/2)]])
# B1= np.array([i for i in induvidual_id_g1[int(len(induvidual_id_g1)/2):len(induvidual_id_g1)]])
#
# print(induvidual_id_g1)
# print(A1)
# print(B1)
# #
# print("------------->____NEW______<--------------\n")
# new_indiv_1 = np.concatenate([A2,B1])
# new_indiv_2 = np.concatenate([A1,B2])
#
# print(new_indiv_1)
#
# print(new_indiv_2)
#
#
#
#
















#
# df = pd.DataFrame(pop)
# print(create_population_simple(10))
#
#
#
#
# def get_fitness(population):
#
#     population_df = pd.DataFrame()
#     for individual in population:
#
#         list = []
#
#         fitness = np.random.random()
#         list.append(fitness)
#
#         individual.update_gen("Fitness", fitness)
#         # print(individual.get_gen("Fitness"))
#
#         aux_population.update({"Fitness": {str(individual.get_gen("NN_ID")): fitness}})
#         df1 = pd.DataFrame(aux_population)
#
#         population_df= population_df.append(df1)
#
#     return  population_df
#
#
#
#
# # def evaluate_population(population):
# #     for individual in population:
# #         print(individual.log_individual)
# #         individual.update_gen("Fitness",get_fitness(individual))
# #         print(individual.get_gen())
#
#

#
#

#
#
#
#
# def mutation(mut_prob,population):
#
#     return population
#
#
# def crossover (group1,group2):
#
#
#
#
#     return population
#
#
#
# population = create_population(100,13,1)
#
# # population = evaluate_population(population)
# population_fitness = get_fitness(population)
# population_ranked = ranking(population_fitness)
# group1, group2 = selection(population_ranked)
#
#
# for index_g1 in range(len(group1)):
#
#     induvidual_id_g1  = group1["Fitness"].index[index_g1]
#     induvidual_id_g1  = induvidual_id_g1 .replace('[', '')
#     induvidual_id_g1  = induvidual_id_g1 .replace(']', '')
#     induvidual_id_g1  = induvidual_id_g1 .split(",")
#     induvidual_id_g1  = np.array([float(i) for i in induvidual_id_g1])
#     A1 = np.array([i for i in induvidual_id_g1[0:int(len(induvidual_id_g1) / 2)]])
#     B1 = np.array([i for i in induvidual_id_g1[int(len(induvidual_id_g1) / 2):len(induvidual_id_g1)]])
#
#     for index_g2 in range(len(group2)):
#         induvidual_id_g2 = group2["Fitness"].index[index_g1]
#         induvidual_id_g2 = induvidual_id_g2.replace('[', '')
#         induvidual_id_g2 = induvidual_id_g2.replace(']', '')
#         induvidual_id_g2 = induvidual_id_g2.split(",")
#         induvidual_id_g2 = np.array([float(i) for i in induvidual_id_g2])
#         A2 = np.array([i for i in induvidual_id_g2[0:int(len(induvidual_id_g2) / 2)]])
#         B2 = np.array([i for i in induvidual_id_g2[int(len(induvidual_id_g2) / 2):len(induvidual_id_g2)]])
#
#         new_indiv_1 = np.concatenate([A2, B1])
#         new_indiv_2 = np.concatenate([A1, B2])
#
#
# #
# induvidual_id_g2 = group2["Fitness"].index[0]
# induvidual_id_g2 = induvidual_id_g2.replace('[', '')
# induvidual_id_g2 = induvidual_id_g2.replace(']', '')
# induvidual_id_g2 = induvidual_id_g2.split(",")
# induvidual_id_g2 = np.array([float(i) for i in induvidual_id_g2])
# A2= np.array([i for i in induvidual_id_g2[0:int(len(induvidual_id_g2)/2)]])
# B2= np.array([i for i in induvidual_id_g2[int(len(induvidual_id_g2)/2):len(induvidual_id_g2)]])
#
# print(induvidual_id_g2)
# print(A2)
# print(B2)
#
# print("------------->__________<--------------\n")
#
# induvidual_id_g1 = group1["Fitness"].index[0]
# induvidual_id_g1 = induvidual_id_g1.replace('[', '')
# induvidual_id_g1 = induvidual_id_g1.replace(']', '')
# induvidual_id_g1 = induvidual_id_g1.split(",")
# induvidual_id_g1 = np.array([float(i) for i in induvidual_id_g1])
# A1= np.array([i for i in induvidual_id_g1[0:int(len(induvidual_id_g1)/2)]])
# B1= np.array([i for i in induvidual_id_g1[int(len(induvidual_id_g1)/2):len(induvidual_id_g1)]])
#
# print(induvidual_id_g1)
# print(A1)
# print(B1)
#
# print("------------->____NEW______<--------------\n")
# new_indiv_1 = np.concatenate([A2,B1])
# new_indiv_2 = np.concatenate([A1,B2])
#
# print(new_indiv_1)
# print(new_indiv_2)
# print(c)

# print(group2.iloc[0])



# for individual in population:
#     print(individual.get_gen("Fitness"))
#

# for individual in population:
#     print(individual.log_individual)
#






#
# the_one.create_individial()
#
# print(the_one.log_indivudual)
