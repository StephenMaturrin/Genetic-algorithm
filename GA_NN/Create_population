import random as rand
import numpy as np
from collections import OrderedDict
import pandas as pd
class induvidual():


#TODO differentiation between equals model
#TODO may I use objects or dictionaries ?

    def __init__(self,input_layer,output_layer):
        self.input_layer = input_layer
        self.output_layer = output_layer
        self.learning_rate= 0
        self.n_layers = []
        self.NN_ID=[]
        self.log_individual = {"Fitness": 0, "ID_father": None, "ID_mother": None, "ID_population": None, "NN_ID": None, "layout": None,
                          "Learning_rate": None}

    def create_individial(self):

        self.learning_rate = np.random.randint(1,10)**-np.random.randint(10)
        self.NN_ID.append(self.learning_rate)

        self.log_individual.update({"Learning_rate":self.learning_rate})
        layers = np.random.randint(1,4)
        self.n_layers.append(self.input_layer)
        self.NN_ID.append(self.n_layers[-1])

        for i in range(layers):
            self.n_layers.append(np.random.randint(1,64))
            self.NN_ID.append(self.n_layers[-1])
        self.n_layers.append(self.output_layer)
        self.NN_ID.append(self.n_layers[-1])

        self.log_individual.update({"NN_ID":self.NN_ID})
        self.log_individual.update({"layout": self.n_layers})
        return self.log_individual



    def get_gen(self):
        return self.log_individual

    def update_gen(self,parameter, value):
        self.log_individual.update({parameter:value})

    def get_gen(self,parameter):
        return self.log_individual[parameter]

population = []
aux_population= {}


def get_fitness(population):

    population_df = pd.DataFrame()
    for individual in population:

        list = []

        fitness = np.random.random()
        list.append(fitness)

        individual.update_gen("Fitness", fitness)
        # print(individual.get_gen("Fitness"))

        aux_population.update({"Fitness": {str(individual.get_gen("NN_ID")): fitness}})
        df1 = pd.DataFrame(aux_population)

        population_df= population_df.append(df1)

    return  population_df

def create_population(n_population,input_layer=13, output_layer=1):

    for i in range(n_population):
        population.append(induvidual(input_layer=input_layer, output_layer=output_layer))
        population[-1].create_individial()
    return  population



# def evaluate_population(population):
#     for individual in population:
#         print(individual.log_individual)
#         individual.update_gen("Fitness",get_fitness(individual))
#         print(individual.get_gen())


def ranking (population):
    df = population.sort_values(by='Fitness')
    return df


def selection (population):

    return population.head(10),population.tail(10)




def mutation(mut_prob,population):

    return population


def crossover (group1,group2):




    return population



population = create_population(100,13,1)
# population = evaluate_population(population)
population_fitness = get_fitness(population)
population_ranked = ranking(population_fitness)
group1, group2 = selection(population_ranked)


# for index_g1 in range(len(group1)):
#
#     induvidual_id_g1  = group1["Fitness"].index[index_g1]
#     induvidual_id_g1  = induvidual_id_g1 .replace('[', '')
#     induvidual_id_g1  = induvidual_id_g1 .replace(']', '')
#     induvidual_id_g1  = induvidual_id_g1 .split(",")
#     induvidual_id_g1  = np.array([float(i) for i in induvidual_id_g1])
#
#
#     for index_g2 in range(len(group2)):
#         induvidual_id_g2 = group2["Fitness"].index[index_g1]
#         induvidual_id_g2 = induvidual_id_g2.replace('[', '')
#         induvidual_id_g2 = induvidual_id_g2.replace(']', '')
#         induvidual_id_g2 = induvidual_id_g2.split(",")
#         induvidual_id_g2 = np.array([float(i) for i in induvidual_id_g2])


induvidual_id_g2 = group2["Fitness"].index[0]
induvidual_id_g2 = induvidual_id_g2.replace('[', '')
induvidual_id_g2 = induvidual_id_g2.replace(']', '')
induvidual_id_g2 = induvidual_id_g2.split(",")
induvidual_id_g2 = np.array([float(i) for i in induvidual_id_g2])
A2= np.array([i for i in induvidual_id_g2[0:int(len(induvidual_id_g2)/2)]])
B2= np.array([i for i in induvidual_id_g2[int(len(induvidual_id_g2)/2):len(induvidual_id_g2)]])

print(induvidual_id_g2)
print(A2)
print(B2)

print("------------->__________<--------------\n")

induvidual_id_g1 = group1["Fitness"].index[0]
induvidual_id_g1 = induvidual_id_g1.replace('[', '')
induvidual_id_g1 = induvidual_id_g1.replace(']', '')
induvidual_id_g1 = induvidual_id_g1.split(",")
induvidual_id_g1 = np.array([float(i) for i in induvidual_id_g1])
A1= np.array([i for i in induvidual_id_g1[0:int(len(induvidual_id_g1)/2)]])
B1= np.array([i for i in induvidual_id_g1[int(len(induvidual_id_g1)/2):len(induvidual_id_g1)]])

print(induvidual_id_g1)
print(A1)
print(B1)

print("------------->____NEW______<--------------\n")
print(np.concatenate([A2,B1]))
print(np.concatenate([A1,B2]))
# print(c)

# print(group2.iloc[0])



# for individual in population:
#     print(individual.get_gen("Fitness"))
#

# for individual in population:
#     print(individual.log_individual)
#






#
# the_one.create_individial()
#
# print(the_one.log_indivudual)
