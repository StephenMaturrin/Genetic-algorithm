import random as rand
import numpy as np
from collections import OrderedDict
import pandas as pd
class induvidual():


#TODO differentiation between equals model
#TODO may I use objects or dictionaries ?
#TODO the layers are also features

    def __init__(self,input_layer=12,output_layer=1):
        self.input_layer = input_layer
        self.output_layer = output_layer
        self.learning_rate= 0
        self.n_layers = []
        self.NN_ID=[]
        self.log_individual = {"Fitness": 0, "ID_father": None, "ID_mother": None, "ID_population": None, "NN_ID": None, "layout": None,
                          "Learning_rate": None}

    def create_individial(self):

        self.learning_rate = np.random.randint(1,10)**-np.random.randint(10)
        self.NN_ID.append(self.learning_rate)

        self.log_individual.update({"Learning_rate":self.learning_rate})
        layers = np.random.randint(1,4)
        self.n_layers.append(self.input_layer)
        self.NN_ID.append(self.n_layers[-1])

        for i in range(layers):
            self.n_layers.append(np.random.randint(1,64))
            self.NN_ID.append(self.n_layers[-1])
        self.n_layers.append(self.output_layer)
        self.NN_ID.append(self.n_layers[-1])

        self.log_individual.update({"NN_ID":self.NN_ID})
        self.log_individual.update({"layout": self.n_layers})


        return self.log_individual



    def get_gen(self):
        return self.log_individual

    def update_gen(self,parameter, value):
        self.log_individual.update({parameter:value})

    def get_gen(self,parameter):
        return self.log_individual[parameter]

population = []
aux_population= {}
#
def get_simple_fitness():
    return  np.random.random()

def create_individual(input_layer,output_layer):
    learning_rate = np.random.randint(1, 10) ** -np.random.randint(10)
    layers = np.random.randint(1, 4)
    n_layers=[]
    n_layers.append(input_layer)
    NN_ID= []
    NN_ID.append(learning_rate)

    NN_ID.append(n_layers[-1])

    for i in range(layers):
        n_layers.append(np.random.randint(1, 64))
        NN_ID.append(n_layers[-1])
    n_layers.append(output_layer)
    NN_ID.append(n_layers[-1])
    # n_layers = np.array(n)
    individual = {"Fitness": [get_simple_fitness()],
            "NN_ID": [[str(i) for i in  NN_ID]],
            "layout": [[str(i) for i in n_layers ]],
            "Learning_rate": learning_rate}

    return individual

# print(create_individual(12,1))
# print(pd.DataFrame(create_individual(12,1)))

def create_population_simple(n_population,input_layer=13, output_layer=1):
    population =[]
    for i in range(n_population):
        population.append(pd.DataFrame(create_individual(input_layer,output_layer)))

    return  population

pop = create_population_simple(100)
pop = pd.concat(pop)
print(pop)

#
# df = pd.DataFrame(pop)
pop.to_csv("pop.csv", sep=';', header=True, float_format='%.6f',index=False)
# print(create_population_simple(10))
#
#
